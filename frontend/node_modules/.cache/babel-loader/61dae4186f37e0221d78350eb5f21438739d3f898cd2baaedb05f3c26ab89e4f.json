{"ast":null,"code":"var _jsxFileName = \"/Users/bharath/Desktop/OOP Grp Proj React(JS) & SpringBoot(Java)/photogen/frontend/src/components/CropResize.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Cropper } from 'react-cropper'; // Verify this import\nimport 'cropperjs/dist/cropper.css';\nimport './CropResize.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CropResize() {\n  _s();\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [cropper, setCropper] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [aspectRatio, setAspectRatio] = useState(null);\n  const aspectRatios = [{\n    label: 'Free',\n    value: null\n  }, {\n    label: '1:1',\n    value: 1\n  }, {\n    label: '4:3',\n    value: 4 / 3\n  }, {\n    label: '16:9',\n    value: 16 / 9\n  }, {\n    label: '2:3',\n    value: 2 / 3\n  }];\n  useEffect(() => {\n    const storedImages = sessionStorage.getItem('uploadedImages');\n    if (storedImages) {\n      const parsedImages = JSON.parse(storedImages);\n      setImages(parsedImages);\n      if (parsedImages.length > 0) {\n        setSelectedImage(parsedImages[0]);\n      }\n    }\n  }, []);\n  useEffect(() => {\n    return () => {\n      // Clean up old URLs when component unmounts\n      images.forEach(image => {\n        if (image.url.startsWith('blob:')) {\n          URL.revokeObjectURL(image.url);\n        }\n      });\n    };\n  }, [images]);\n  useEffect(() => {\n    return () => {\n      if (cropper) {\n        cropper.destroy();\n      }\n    };\n  }, [cropper]);\n  useEffect(() => {\n    if (!isEditing && cropper) {\n      cropper.destroy();\n      setCropper(null);\n    }\n  }, [isEditing, cropper]);\n  const handleCrop = () => {\n    if (cropper) {\n      if (croppedCanvas) {\n        // Convert canvas to base64 string\n        const base64Data = croppedCanvas.toDataURL('image/jpeg', 0.95);\n\n        // Create new image name with timestamp\n        const timestamp = new Date().getTime();\n        const newImageName = `${selectedImage.name.split('.')[0]}_cropped_${timestamp}.jpg`;\n\n        // Create new image object\n        const newImage = {\n          url: base64Data,\n          name: newImageName\n        };\n\n        // Add the cropped image to the array\n        const updatedImages = [...images, newImage];\n\n        // Update state\n        setImages(updatedImages);\n        setSelectedImage(newImage);\n\n        // Update sessionStorage with the new images array\n        try {\n          sessionStorage.setItem('uploadedImages', JSON.stringify(updatedImages));\n          console.log('Successfully saved cropped image to sessionStorage');\n        } catch (error) {\n          console.error('Error saving to sessionStorage:', error);\n        }\n\n        // Reset cropping controls\n        setIsEditing(false);\n        setAspectRatio(null);\n\n        // Force cropper instance reset\n        if (cropper) {\n          cropper.reset();\n          cropper.clear();\n        }\n      }\n    }\n  };\n  const resetCropperState = useCallback(() => {\n    setIsEditing(false);\n    setAspectRatio(null);\n    if (cropper) {\n      cropper.reset();\n      cropper.clear();\n    }\n  }, [cropper]);\n  useEffect(() => {\n    resetCropperState();\n  }, [selectedImage, resetCropperState]);\n  const handleRotate = degrees => {\n    if (cropper) {\n      cropper.rotate(degrees);\n    }\n  };\n  const handleAspectRatioChange = ratio => {\n    setAspectRatio(ratio);\n    if (cropper) {\n      // Clear existing crop area\n      cropper.clear();\n      // Set new aspect ratio\n      cropper.setAspectRatio(ratio);\n      // Reset crop box to full image with new aspect ratio\n      cropper.reset();\n      // Center the crop box\n      const containerData = cropper.getContainerData();\n      const cropBoxData = cropper.getCropBoxData();\n      const centerX = (containerData.width - cropBoxData.width) / 2;\n      const centerY = (containerData.height - cropBoxData.height) / 2;\n      cropper.setCropBoxData({\n        left: centerX,\n        top: centerY\n      });\n    }\n  };\n  const handleImageSelect = image => {\n    setSelectedImage(image);\n    resetCropperState();\n  };\n  const handleEditToggle = () => {\n    setIsEditing(prev => {\n      const newState = !prev;\n      if (!newState && cropper) {\n        cropper.destroy();\n        setCropper(null);\n      }\n      return newState;\n    });\n  };\n  if (images.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"crop-resize-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-images\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"No Images Available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please upload some images first\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"crop-resize-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-main\",\n      children: selectedImage && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-workspace\",\n          children: isEditing ? /*#__PURE__*/_jsxDEV(Cropper, {\n            src: selectedImage.url,\n            style: {\n              height: '500px',\n              width: '100%'\n            } // Set explicit height\n            ,\n            initialAspectRatio: aspectRatio || NaN,\n            guides: true,\n            viewMode: 2 // Changed from 1 to 2 for better viewing\n            ,\n            minCropBoxHeight: 10,\n            minCropBoxWidth: 10,\n            background: false,\n            responsive: true,\n            autoCropArea: 1,\n            checkOrientation: false,\n            onInitialized: instance => {\n              setCropper(instance);\n            },\n            cropBoxMovable: true,\n            cropBoxResizable: true,\n            dragMode: \"move\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n            src: selectedImage.url,\n            alt: selectedImage.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editor-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"controls-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Crop & Resize Controls\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `edit-button ${isEditing ? 'active' : ''}`,\n              onClick: handleEditToggle,\n              children: isEditing ? 'Cancel' : 'Edit Image'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this), isEditing && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"aspect-ratio-controls\",\n              children: aspectRatios.map((ratio, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `aspect-ratio-button ${aspectRatio === ratio.value ? 'active' : ''}`,\n                onClick: () => handleAspectRatioChange(ratio.value),\n                children: ratio.label\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"control-buttons\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleRotate(-90),\n                children: \"Rotate Left\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleRotate(90),\n                children: \"Rotate Right\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"primary-button\",\n                onClick: handleCrop,\n                children: \"Apply Crop\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-sidebar\",\n      children: images.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `thumbnail ${selectedImage === image ? 'selected' : ''}`,\n        onClick: () => handleImageSelect(image),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: image.url,\n          alt: image.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this)\n      }, image.url, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n_s(CropResize, \"TgAWkl/DvaX0VI0AE3S3kqK1a8M=\");\n_c = CropResize;\nexport default CropResize;\nvar _c;\n$RefreshReg$(_c, \"CropResize\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Cropper","jsxDEV","_jsxDEV","Fragment","_Fragment","CropResize","_s","images","setImages","selectedImage","setSelectedImage","cropper","setCropper","isEditing","setIsEditing","aspectRatio","setAspectRatio","aspectRatios","label","value","storedImages","sessionStorage","getItem","parsedImages","JSON","parse","length","forEach","image","url","startsWith","URL","revokeObjectURL","destroy","handleCrop","croppedCanvas","base64Data","toDataURL","timestamp","Date","getTime","newImageName","name","split","newImage","updatedImages","setItem","stringify","console","log","error","reset","clear","resetCropperState","handleRotate","degrees","rotate","handleAspectRatioChange","ratio","containerData","getContainerData","cropBoxData","getCropBoxData","centerX","width","centerY","height","setCropBoxData","left","top","handleImageSelect","handleEditToggle","prev","newState","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","style","initialAspectRatio","NaN","guides","viewMode","minCropBoxHeight","minCropBoxWidth","background","responsive","autoCropArea","checkOrientation","onInitialized","instance","cropBoxMovable","cropBoxResizable","dragMode","alt","onClick","map","index","_c","$RefreshReg$"],"sources":["/Users/bharath/Desktop/OOP Grp Proj React(JS) & SpringBoot(Java)/photogen/frontend/src/components/CropResize.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { Cropper } from 'react-cropper'; // Verify this import\nimport 'cropperjs/dist/cropper.css';\nimport './CropResize.css';\n\nfunction CropResize() {\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [cropper, setCropper] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [aspectRatio, setAspectRatio] = useState(null);\n\n  const aspectRatios = [\n    { label: 'Free', value: null },\n    { label: '1:1', value: 1 },\n    { label: '4:3', value: 4/3 },\n    { label: '16:9', value: 16/9 },\n    { label: '2:3', value: 2/3 }\n  ];\n\n  useEffect(() => {\n    const storedImages = sessionStorage.getItem('uploadedImages');\n    if (storedImages) {\n      const parsedImages = JSON.parse(storedImages);\n      setImages(parsedImages);\n      if (parsedImages.length > 0) {\n        setSelectedImage(parsedImages[0]);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      // Clean up old URLs when component unmounts\n      images.forEach(image => {\n        if (image.url.startsWith('blob:')) {\n          URL.revokeObjectURL(image.url);\n        }\n      });\n    };\n  }, [images]);\n\n  useEffect(() => {\n    return () => {\n      if (cropper) {\n        cropper.destroy();\n      }\n    };\n  }, [cropper]);\n\n  useEffect(() => {\n    if (!isEditing && cropper) {\n      cropper.destroy();\n      setCropper(null);\n    }\n  }, [isEditing, cropper]);\n\n  const handleCrop = () => {\n    if (cropper) {\n      if (croppedCanvas) {\n        // Convert canvas to base64 string\n        const base64Data = croppedCanvas.toDataURL('image/jpeg', 0.95);\n\n        // Create new image name with timestamp\n        const timestamp = new Date().getTime();\n        const newImageName = `${selectedImage.name.split('.')[0]}_cropped_${timestamp}.jpg`;\n\n        // Create new image object\n        const newImage = {\n          url: base64Data,\n          name: newImageName\n        };\n\n        // Add the cropped image to the array\n        const updatedImages = [...images, newImage];\n\n        // Update state\n        setImages(updatedImages);\n        setSelectedImage(newImage);\n\n        // Update sessionStorage with the new images array\n        try {\n          sessionStorage.setItem('uploadedImages', JSON.stringify(updatedImages));\n          console.log('Successfully saved cropped image to sessionStorage');\n        } catch (error) {\n          console.error('Error saving to sessionStorage:', error);\n        }\n\n        // Reset cropping controls\n        setIsEditing(false);\n        setAspectRatio(null);\n        \n        // Force cropper instance reset\n        if (cropper) {\n          cropper.reset();\n          cropper.clear();\n        }\n      }\n    }\n  };\n\n  const resetCropperState = useCallback(() => {\n    setIsEditing(false);\n    setAspectRatio(null);\n    if (cropper) {\n      cropper.reset();\n      cropper.clear();\n    }\n  }, [cropper]);\n\n  useEffect(() => {\n    resetCropperState();\n  }, [selectedImage, resetCropperState]);\n\n  const handleRotate = (degrees) => {\n    if (cropper) {\n      cropper.rotate(degrees);\n    }\n  };\n\n  const handleAspectRatioChange = (ratio) => {\n    setAspectRatio(ratio);\n    if (cropper) {\n      // Clear existing crop area\n      cropper.clear();\n      // Set new aspect ratio\n      cropper.setAspectRatio(ratio);\n      // Reset crop box to full image with new aspect ratio\n      cropper.reset();\n      // Center the crop box\n      const containerData = cropper.getContainerData();\n      const cropBoxData = cropper.getCropBoxData();\n      const centerX = (containerData.width - cropBoxData.width) / 2;\n      const centerY = (containerData.height - cropBoxData.height) / 2;\n      cropper.setCropBoxData({\n        left: centerX,\n        top: centerY\n      });\n    }\n  };\n\n  const handleImageSelect = (image) => {\n    setSelectedImage(image);\n    resetCropperState();\n  };\n\n  const handleEditToggle = () => {\n    setIsEditing(prev => {\n      const newState = !prev;\n      if (!newState && cropper) {\n        cropper.destroy();\n        setCropper(null);\n      }\n      return newState;\n    });\n  };\n\n  if (images.length === 0) {\n    return (\n      <div className=\"crop-resize-container\">\n        <div className=\"no-images\">\n          <h3>No Images Available</h3>\n          <p>Please upload some images first</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"crop-resize-container\">\n      <div className=\"editor-main\">\n        {selectedImage && (\n          <>\n            <div className=\"image-workspace\">\n              {isEditing ? (\n                <Cropper\n                  src={selectedImage.url}\n                  style={{ height: '500px', width: '100%' }} // Set explicit height\n                  initialAspectRatio={aspectRatio || NaN}\n                  guides={true}\n                  viewMode={2} // Changed from 1 to 2 for better viewing\n                  minCropBoxHeight={10}\n                  minCropBoxWidth={10}\n                  background={false}\n                  responsive={true}\n                  autoCropArea={1}\n                  checkOrientation={false}\n                  onInitialized={(instance) => {\n                    setCropper(instance);\n                  }}\n                  cropBoxMovable={true}\n                  cropBoxResizable={true}\n                  dragMode=\"move\"\n                />\n              ) : (\n                <img src={selectedImage.url} alt={selectedImage.name} />\n              )}\n            </div>\n            <div className=\"editor-controls\">\n              <div className=\"controls-header\">\n                <h3>Crop & Resize Controls</h3>\n                <button \n                  className={`edit-button ${isEditing ? 'active' : ''}`}\n                  onClick={handleEditToggle}\n                >\n                  {isEditing ? 'Cancel' : 'Edit Image'}\n                </button>\n              </div>\n              {isEditing && (\n                <>\n                  <div className=\"aspect-ratio-controls\">\n                    {aspectRatios.map((ratio, index) => (\n                      <button\n                        key={index}\n                        className={`aspect-ratio-button ${aspectRatio === ratio.value ? 'active' : ''}`}\n                        onClick={() => handleAspectRatioChange(ratio.value)}\n                      >\n                        {ratio.label}\n                      </button>\n                    ))}\n                  </div>\n                  <div className=\"control-buttons\">\n                    <button onClick={() => handleRotate(-90)}>\n                      Rotate Left\n                    </button>\n                    <button onClick={() => handleRotate(90)}>\n                      Rotate Right\n                    </button>\n                    <button className=\"primary-button\" onClick={handleCrop}>\n                      Apply Crop\n                    </button>\n                  </div>\n                </>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n      <div className=\"image-sidebar\">\n        {images.map((image, index) => (\n          <div \n            key={image.url}\n            className={`thumbnail ${selectedImage === image ? 'selected' : ''}`}\n            onClick={() => handleImageSelect(image)}\n          >\n            <img src={image.url} alt={image.name} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default CropResize;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}